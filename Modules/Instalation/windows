if (!require("reticulate")) install.packages("reticulate")
if (!require("tensorflow")) install.packages("tensorflow")

library(reticulate)
library(tensorflow)


# ---- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∏–∑–º–µ–Ω–∏—Ç–µ –ø—É—Ç–∏!) ----
setwd( "C:\\Users\\usato\\Documents\\YandexDisk\\System_data_LRG")
tensorflow_gpu_pth = "Instalation\\tensorflow_gpu-2.10.0-cp39-cp39-win_amd64.whl"
cuda_exe <- "Instalation\\cuda_11.8.0_522.06_windows.exe"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ CUDA
cudnn_zip_path <- "Instalation\\cudnn-windows-x86_64-8.6.0.163_cuda11-archive.zip"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ cuDNN
cuda_install_dir <- "NVIDIA GPU Computing Toolkit\\CUDA\\v11.8"  # –ö—É–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å CUDA
#############################################################################################################
# ---- –§—É–Ω–∫—Ü–∏–∏ ----
install_cuda_from_local <- function() {
  if (!file.exists(cuda_installer_path)) {
    stop(paste("–§–∞–π–ª CUDA –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏:", cuda_installer_path))
  }

  if (!dir.exists(cuda_install_dir)) {
     dir.create("NVIDIA GPU Computing Toolkit")
	 dir.create("NVIDIA GPU Computing Toolkit\\CUDA")
    dir.create(cuda_install_dir)
  }


  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–∏—Ö–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
  install_cmd <- sprintf(
    '"%s" -s nvcc_11.8 cudart_11.8 cublas_dev_11.8 --installpath="%s"',
    cuda_exe,
    cuda_install_dir
  )
  
  message("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CUDA –≤: ", cuda_install_dir)
  system(install_cmd)
}
######################################################################

install_cudnn_from_local <- function() {
  if (!file.exists(cudnn_zip_path)) {
    stop(paste("–ê—Ä—Ö–∏–≤ cuDNN –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏:", cudnn_zip_path))
  }
  
  
  
  message("‚öôÔ∏è –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ cuDNN...")
  unzip(cudnn_zip_path, exdir = cuda_install_dir)
  
  # –î–æ–±–∞–≤–ª—è–µ–º CUDA –≤ PATH
  cudnn_unpack_dir <- file.path(cuda_install_dir, "cudnn")
  
 Sys.setenv(
  CUDA_PATH = cuda_install_dir,
  PATH = paste0(
    file.path(cuda_install_dir, "bin"), ";",
    file.path(cuda_install_dir, "libnvvp"), ";",
    Sys.getenv("PATH")
  )
)
}
##############################################################################
check_nvidia_driver <- function() {
  message("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ NVIDIA...")
  tryCatch({
    driver_version <- system("nvidia-smi --query-gpu=driver_version --format=csv,noheader", intern = TRUE)
    if (length(driver_version) > 0) {
      message("‚úÖ –î—Ä–∞–π–≤–µ—Ä NVIDIA –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ", driver_version)
      return(TRUE)
    } else {
      message("‚ùå –î—Ä–∞–π–≤–µ—Ä NVIDIA –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
      return(FALSE)
    }
  }, error = function(e) {
    message("‚ùå –û—à–∏–±–∫–∞: ", e$message)
    return(FALSE)
  })
}



###############################################################################
check_gpu <- function() {
  tryCatch({
    gpus <- tf$config$list_physical_devices("GPU")
    if (length(gpus) > 0) {
      message("‚úÖ GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: ", gpus[[1]]$name)
      return(TRUE)
    }
    message("‚ùå GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    return(FALSE)
  }, error = function(e) {
    message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: ", e$message)
    return(FALSE)
  })
}
#########################################################################
# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ NVIDIA
  if (!check_nvidia_driver()) { stop("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä NVIDIA –≤—Ä—É—á–Ω—É—é: https://www.nvidia.com/Download/index.aspx")}
  
  # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CUDA –∏ cuDNN
  install_cuda_from_local()
  install_cudnn_from_local()
  
  system("nvcc --version") 
  
  # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
  if (!file.exists(miniconda_path())) install_miniconda()
  
  env_name <- "tf_gpu_env"
  if (!env_exists(env_name)) {
    conda_create(env_name, python_version = "3.9")
  }
  
  use_condaenv(env_name, required = TRUE)
  
  # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TensorFlow
  message("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TensorFlow-GPU 2.10...")
  py_install("numpy==1.24.4")
  py_install(tensorflow_gpu_pth, pip = TRUE)
  py_install("keras==2.10.0", pip = TRUE) 
 
  
  # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞
  message("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU...")
  check_gpu()
  
